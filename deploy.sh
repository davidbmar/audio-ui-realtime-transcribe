#!/bin/bash
set -e

# Deploy the serverless application
echo "Deploying serverless application..."
serverless deploy

# Get the outputs from the deployment
export AWS_PAGER=""
USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name cloudfront-cognito-app-dev --query "Stacks[0].Outputs[?OutputKey=='UserPoolId'].OutputValue" --output text)
USER_POOL_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name cloudfront-cognito-app-dev --query "Stacks[0].Outputs[?OutputKey=='UserPoolClientId'].OutputValue" --output text)
IDENTITY_POOL_ID=$(aws cloudformation describe-stacks --stack-name cloudfront-cognito-app-dev --query "Stacks[0].Outputs[?OutputKey=='IdentityPoolId'].OutputValue" --output text)
API_ENDPOINT=$(aws cloudformation describe-stacks --stack-name cloudfront-cognito-app-dev --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" --output text)
WEBSITE_URL=$(aws cloudformation describe-stacks --stack-name cloudfront-cognito-app-dev --query "Stacks[0].Outputs[?OutputKey=='WebsiteURL'].OutputValue" --output text)
CLOUDFRONT_URL=$(aws cloudformation describe-stacks --stack-name cloudfront-cognito-app-dev --query "Stacks[0].Outputs[?OutputKey=='CloudFrontURL'].OutputValue" --output text)

# Add this after getting the CloudFront URL
aws cognito-idp update-user-pool-client \
  --user-pool-id $USER_POOL_ID \
  --client-id $USER_POOL_CLIENT_ID \
  --callback-urls "${CLOUDFRONT_URL}/callback.html" \
  --logout-urls "${CLOUDFRONT_URL}/index.html" \
  --allowed-o-auth-flows "code" "implicit" \
  --allowed-o-auth-scopes "email" "openid" "profile" \
  --supported-identity-providers "COGNITO" \
  --allowed-o-auth-flows-user-pool-client

# Improved Cognito domain detection
echo "Checking for Cognito domain..."
# Use describe-user-pool-domain command to check if a domain exists for the pool
DOMAIN_CHECK=$(aws cognito-idp describe-user-pool --user-pool-id $USER_POOL_ID)
DOMAIN_NAME=$(echo "$DOMAIN_CHECK" | grep -A 3 "Domain" | grep ":" | cut -d'"' -f4)

if [ -z "$DOMAIN_NAME" ] || [ "$DOMAIN_NAME" == "null" ]; then
    echo "No domain found. Let's try checking for active domains..."
    
    # Try to get the active domain directly from AWS Console screen
    read -p "Please go to AWS Console > Cognito > User Pools > App Integration tab and check if there's a domain. If yes, enter it here (without .auth.region.amazoncognito.com): " DOMAIN_NAME
    
    if [ -z "$DOMAIN_NAME" ]; then
        echo "No domain provided. Creating a new one..."
        DOMAIN_NAME="cloudfront-cognito-app-$(date +%s)"
        
        # Try to create the domain
        if aws cognito-idp create-user-pool-domain --domain $DOMAIN_NAME --user-pool-id $USER_POOL_ID; then
            echo "Successfully created domain: $DOMAIN_NAME"
        else
            echo "Failed to create domain. Please check AWS Console and manually create a domain."
            read -p "Enter the domain you created (without .auth.region.amazoncognito.com): " DOMAIN_NAME
            
            if [ -z "$DOMAIN_NAME" ]; then
                echo "No domain provided. Cannot continue without a domain."
                exit 1
            fi
        fi
    else
        echo "Using existing domain: $DOMAIN_NAME"
    fi
else
    echo "Found domain: $DOMAIN_NAME"
fi

# Update the app.js file with the correct values
echo "Updating app.js with deployment values..."
# First, make sure we're working from the template
if [ -f web/app.js.template ]; then
    echo "Creating app.js from template..."
    cp web/app.js.template web/app.js
else
    echo "WARNING: app.js.template not found. Using existing app.js file."
fi

sed -i.bak "s|YOUR_USER_POOL_ID|$USER_POOL_ID|g" web/app.js
sed -i.bak "s|YOUR_USER_POOL_CLIENT_ID|$USER_POOL_CLIENT_ID|g" web/app.js
sed -i.bak "s|YOUR_IDENTITY_POOL_ID|$IDENTITY_POOL_ID|g" web/app.js
sed -i.bak "s|YOUR_API_ENDPOINT|$API_ENDPOINT|g" web/app.js
sed -i.bak "s|YOUR_APP_URL|$CLOUDFRONT_URL|g" web/app.js

# Replace the login function with the correct domain
sed -i.bak "s|YOUR_COGNITO_DOMAIN_PREFIX|$DOMAIN_NAME|g" web/app.js

# Add large warning to the top of app.js
WARNING="// WARNING: THIS FILE IS AUTO-GENERATED BY THE DEPLOYMENT SCRIPT.\n// DO NOT EDIT DIRECTLY AS YOUR CHANGES WILL BE OVERWRITTEN.\n// EDIT app.js.template INSTEAD.\n"
sed -i.bak "1s|^|$WARNING\n|" web/app.js

# Get the S3 bucket name from CloudFormation outputs
BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name cloudfront-cognito-app-dev --query "Stacks[0].Outputs[?OutputKey=='WebsiteBucketName'].OutputValue" --output text)
# If that doesn't work, fall back to constructing it manually
if [ -z "$BUCKET_NAME" ]; then
    echo "Warning: Couldn't get bucket name from outputs, constructing manually"
    ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
    BUCKET_NAME="cloudfront-cognito-app-dbm-website-dev-$ACCOUNT_ID"
fi

# Invoke the setIdentityPoolRoles function to ensure roles are properly set
echo "Triggering the setIdentityPoolRoles Lambda function..."
FUNCTION_NAME="cloudfront-cognito-app-dev-setIdentityPoolRoles"
aws lambda invoke --function-name $FUNCTION_NAME --invocation-type Event /dev/null || echo "Function invocation failed, but continuing deployment"

# Upload the website files to S3
echo "Uploading website files to S3..."
aws s3 cp web/ s3://$BUCKET_NAME/ --recursive

# Create a CloudFront invalidation
echo "Creating CloudFront invalidation..."
DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?DomainName=='$(echo $CLOUDFRONT_URL | sed 's|https://||')'].Id" --output text)
if [ -n "$DISTRIBUTION_ID" ]; then
    aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
    echo "Created CloudFront invalidation for all paths"
else
    echo "Warning: Could not determine CloudFront distribution ID"
fi

# Get the AWS region from AWS CLI configuration
AWS_REGION=$(aws configure get region)
if [ -z "$AWS_REGION" ]; then
    AWS_REGION="us-east-2"  # Default to us-east-2 if not configured
fi

echo "Deployment complete!"
echo "Website URL: $WEBSITE_URL"
echo "CloudFront URL: $CLOUDFRONT_URL"
echo "API Endpoint: $API_ENDPOINT"
echo "User Pool ID: $USER_POOL_ID"
echo "User Pool Client ID: $USER_POOL_CLIENT_ID"
echo "Identity Pool ID: $IDENTITY_POOL_ID"
echo "Cognito Domain: $DOMAIN_NAME.auth.$AWS_REGION.amazoncognito.com"

echo "⚠️ Note: It may take a few minutes for the CloudFront distribution to deploy."
echo "⚠️ Once deployed, you may need to create a user in the Cognito User Pool to test the authentication."
echo "⚠️ IMPORTANT: Do not commit web/app.js to version control as it contains environment-specific values."
echo "⚠️ Only commit web/app.js.template and let the deployment script generate app.js during deployment."
