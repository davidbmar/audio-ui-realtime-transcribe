// WARNING: This is a template file that gets modified during deployment
// DO NOT EDIT app.js directly as changes will be overwritten during deployment
// Make changes to app.js.template instead

// Configuration - to be updated after deployment
const config = {
    userPoolId: 'YOUR_USER_POOL_ID',
    userPoolClientId: 'YOUR_USER_POOL_CLIENT_ID',
    identityPoolId: 'YOUR_IDENTITY_POOL_ID',
    region: 'us-east-2', // Your AWS region
    apiUrl: 'YOUR_CLOUDFRONT_API_ENDPOINT', // CloudFront API endpoint
    s3ApiUrl: 'YOUR_CLOUDFRONT_S3_API_ENDPOINT', // CloudFront S3 API endpoint
    appUrl: 'YOUR_APP_URL'
};

// DOM elements
const loginButton = document.getElementById('login-button');
const logoutButton = document.getElementById('logout-button');
const getDataButton = document.getElementById('get-data-button');
const listS3Button = document.getElementById('list-s3-button');
const userEmailSpan = document.getElementById('user-email');
const dataOutput = document.getElementById('data-output');
const loginSection = document.getElementById('login-section');
const authenticatedSection = document.getElementById('authenticated-section');

// Check if user is authenticated
function checkAuthentication() {
    console.log("Checking authentication...");
    const idToken = localStorage.getItem('id_token');
    
    if (idToken) {
        console.log("Found ID token, verifying...");
        try {
            // Parse the JWT token to get the email
            const payload = JSON.parse(atob(idToken.split('.')[1]));
            
            // Check if token is expired
            const now = Math.floor(Date.now() / 1000);
            if (payload.exp && payload.exp < now) {
                console.log("Token expired, logging out");
                localStorage.removeItem('id_token');
                localStorage.removeItem('access_token');
                loginSection.style.display = 'block';
                authenticatedSection.style.display = 'none';
                return;
            }
            
            console.log("Token valid, displaying authenticated section");
            // User is authenticated
            loginSection.style.display = 'none';
            authenticatedSection.style.display = 'block';
            userEmailSpan.textContent = payload.email || 'User';
        } catch (error) {
            console.error('Error parsing token:', error);
            userEmailSpan.textContent = 'Authenticated User';
            // Still show authenticated section even if we can't parse the token
            loginSection.style.display = 'none';
            authenticatedSection.style.display = 'block';
        }
    } else {
        console.log("No token found, displaying login section");
        // User is not authenticated
        loginSection.style.display = 'block';
        authenticatedSection.style.display = 'none';
    }
}

// Initialize when page loads
document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM loaded, checking authentication");
    checkAuthentication();
    
    // Set up event listeners
    if (loginButton) loginButton.addEventListener('click', login);
    if (logoutButton) logoutButton.addEventListener('click', logout);
    if (getDataButton) getDataButton.addEventListener('click', getData);
    if (listS3Button) listS3Button.addEventListener('click', listS3Files);
});

// Login function - this will be replaced during deployment with the correct domain
function login() {
    console.log("Login function called");
    // The domain prefix will be replaced during deployment
    const authUrl = 'https://YOUR_COGNITO_DOMAIN_PREFIX.auth.us-east-2.amazoncognito.com/login';
    const redirectUri = `${config.appUrl}/callback.html`;
    
    const queryParams = new URLSearchParams({
        client_id: config.userPoolClientId,
        response_type: 'token', // Use token for implicit flow
        scope: 'email openid profile',
        redirect_uri: redirectUri,
    });
    
    const loginUrl = `${authUrl}?${queryParams.toString()}`;
    console.log("Redirecting to:", loginUrl);
    window.location.href = loginUrl;
}

// Logout function
function logout() {
    localStorage.removeItem('id_token');
    localStorage.removeItem('access_token');
    checkAuthentication();
}

// Get data from Lambda function via CloudFront
async function getData() {
    const idToken = localStorage.getItem('id_token');
    
    if (!idToken) {
        dataOutput.textContent = 'You must be logged in to access the API.';
        return;
    }
    
    try {
        console.log('Making API call to:', config.apiUrl);
        dataOutput.textContent = 'Loading...';
        
        const response = await fetch(config.apiUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${idToken}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });
        
        console.log('API response status:', response.status);
        console.log('API response headers:', response.headers);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('API error response:', errorText);
            throw new Error(`API request failed: ${response.status} - ${errorText}`);
        }
        
        const data = await response.json();
        console.log('API response data:', data);
        dataOutput.textContent = JSON.stringify(data, null, 2);
    } catch (error) {
        console.error('Error calling API:', error);
        dataOutput.textContent = `Error: ${error.message}`;
        
        // Additional debugging information
        const debugInfo = {
            timestamp: new Date().toISOString(),
            apiUrl: config.apiUrl,
            hasToken: !!idToken,
            error: error.message,
            userAgent: navigator.userAgent
        };
        
        console.log('Debug info:', debugInfo);
    }
}

// Updated listS3Files function for web/app.js.template
// Replace the existing listS3Files function with this enhanced version

async function listS3Files() {
    const idToken = localStorage.getItem('id_token');
    
    if (!idToken) {
        dataOutput.textContent = 'You must be logged in to access S3.';
        return;
    }
    
    try {
        console.log('Making S3 list API call...');
        dataOutput.textContent = 'Loading S3 files...';
        
        const response = await fetch('/api/s3/list?prefix=', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${idToken}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });
        
        console.log('S3 API response status:', response.status);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('S3 API error response:', errorText);
            throw new Error(`S3 API request failed: ${response.status} - ${errorText}`);
        }
        
        const data = await response.json();
        console.log('S3 API response data:', data);
        
        // Format the output nicely with download buttons
        let output = `S3 Files (${data.count} files found):\n\n`;
        
        if (data.files && data.files.length > 0) {
            data.files.forEach((file, index) => {
                // Use displayKey if available, otherwise use the full key
                const displayName = file.displayKey || file.key || file;
                const fullKey = file.key || file;
                
                output += `${index + 1}. ${displayName}\n`;
                
                if (typeof file === 'object') {
                    output += `   Size: ${file.size} bytes\n`;
                    output += `   Modified: ${new Date(file.lastModified).toLocaleDateString()}\n`;
                    output += `   [Download] - Click to get download link for: ${fullKey}\n\n`;
                } else {
                    output += `   [Download] - Click to get download link for: ${fullKey}\n\n`;
                }
            });
            
            output += '\n--- Download Instructions ---\n';
            output += 'To download a file, we need to implement the download button functionality.\n';
            output += 'The download API endpoint is ready and working!';
        } else {
            output += 'No files found in your directory.\n\n';
            output += 'Upload some files to your user directory to see them here:\n';
            output += `aws s3 cp <local-file> s3://${data.bucket}/users/${data.userId}/<filename>`;
        }
        
        dataOutput.textContent = output;
    } catch (error) {
        console.error('Error calling S3 API:', error);
        dataOutput.textContent = `Error: ${error.message}`;
    }
}



