// WARNING: This is a template file that gets modified during deployment
// DO NOT EDIT app.js directly as changes will be overwritten during deployment
// Make changes to app.js.template instead

// Configuration - to be updated after deployment
const config = {
    userPoolId: 'YOUR_USER_POOL_ID',
    userPoolClientId: 'YOUR_USER_POOL_CLIENT_ID',
    identityPoolId: 'YOUR_IDENTITY_POOL_ID',
    region: 'us-east-2', // Your AWS region
    apiUrl: 'YOUR_CLOUDFRONT_API_ENDPOINT', // CloudFront API endpoint
    s3ApiUrl: 'YOUR_CLOUDFRONT_S3_API_ENDPOINT', // CloudFront S3 API endpoint
    appUrl: 'YOUR_APP_URL'
};

// DOM elements
const loginButton = document.getElementById('login-button');
const logoutButton = document.getElementById('logout-button');
const getDataButton = document.getElementById('get-data-button');
const listS3Button = document.getElementById('list-s3-button');
const userEmailSpan = document.getElementById('user-email');
const dataOutput = document.getElementById('data-output');
const loginSection = document.getElementById('login-section');
const authenticatedSection = document.getElementById('authenticated-section');

// Enhanced checkAuthentication function for modern UI
function checkAuthentication() {
    console.log("Checking authentication...");
    const idToken = localStorage.getItem('id_token');
    const loginSection = document.getElementById('login-section');
    const authenticatedSection = document.getElementById('authenticated-section');
    const userInfo = document.getElementById('user-info');
    const userAvatar = document.getElementById('user-avatar');
    const userName = document.getElementById('user-name');
    
    if (idToken) {
        console.log("Found ID token, verifying...");
        try {
            const payload = JSON.parse(atob(idToken.split('.')[1]));
            
            // Check if token is expired
            const now = Math.floor(Date.now() / 1000);
            if (payload.exp && payload.exp < now) {
                console.log("Token expired, logging out");
                localStorage.removeItem('id_token');
                localStorage.removeItem('access_token');
                showLoginSection();
                return;
            }
            
            console.log("Token valid, displaying authenticated section");
            
            // Update user info
            const email = payload.email || 'User';
            const initials = email.split('@')[0].substring(0, 2).toUpperCase();
            
            userAvatar.textContent = initials;
            userName.textContent = email;
            
            // Show authenticated UI
            loginSection.style.display = 'none';
            authenticatedSection.style.display = 'block';
            userInfo.style.display = 'flex';
            
            // Auto-load files
            setTimeout(() => {
                listS3Files();
            }, 500);
            
        } catch (error) {
            console.error('Error parsing token:', error);
            showLoginSection();
        }
    } else {
        console.log("No token found, displaying login section");
        showLoginSection();
    }
}

function showLoginSection() {
    const loginSection = document.getElementById('login-section');
    const authenticatedSection = document.getElementById('authenticated-section');
    const userInfo = document.getElementById('user-info');
    
    loginSection.style.display = 'block';
    authenticatedSection.style.display = 'none';
    userInfo.style.display = 'none';
}


// Initialize when page loads
document.addEventListener('DOMContentLoaded', function() {
    console.log("DOM loaded, checking authentication");
    checkAuthentication();
    
    // Set up event listeners
    if (loginButton) loginButton.addEventListener('click', login);
    if (logoutButton) logoutButton.addEventListener('click', logout);
    if (getDataButton) getDataButton.addEventListener('click', getData);
    if (listS3Button) listS3Button.addEventListener('click', listS3Files);

    // View Memory button
    const viewMemoryBtn = document.getElementById('view-memory');
    if (viewMemoryBtn) {
        viewMemoryBtn.addEventListener('click', showMemorySection);
    }
    
    // Back to Files button
    const backToFilesBtn = document.getElementById('back-to-files');
    if (backToFilesBtn) {
        backToFilesBtn.addEventListener('click', showFileSection);
    }
    
    // Refresh Memory button
    const refreshMemoryBtn = document.getElementById('refresh-memory');
    if (refreshMemoryBtn) {
        refreshMemoryBtn.addEventListener('click', function() {
            const activeTab = document.querySelector('.memory-tab.active');
            const scope = activeTab ? activeTab.getAttribute('data-scope') : 'public';
            loadMemoryFiles(scope);
        });
    }
    
    // Memory tab switching
    const memoryTabs = document.querySelectorAll('.memory-tab');
    memoryTabs.forEach(tab => {
        tab.addEventListener('click', function() {
            // Remove active class from all tabs
            memoryTabs.forEach(t => t.classList.remove('active'));
            
            // Add active class to clicked tab
            this.classList.add('active');
            
            // Load memory files for the selected scope
            const scope = this.getAttribute('data-scope');
            loadMemoryFiles(scope);
        });
    });    


});

// Login function - this will be replaced during deployment with the correct domain
function login() {
    console.log("Login function called");
    // The domain prefix will be replaced during deployment
    const authUrl = 'https://YOUR_COGNITO_DOMAIN_PREFIX.auth.us-east-2.amazoncognito.com/login';
    const redirectUri = `${config.appUrl}/callback.html`;
    
    const queryParams = new URLSearchParams({
        client_id: config.userPoolClientId,
        response_type: 'token', // Use token for implicit flow
        scope: 'email openid profile',
        redirect_uri: redirectUri,
    });
    
    const loginUrl = `${authUrl}?${queryParams.toString()}`;
    console.log("Redirecting to:", loginUrl);
    window.location.href = loginUrl;
}

// Logout function
function logout() {
    localStorage.removeItem('id_token');
    localStorage.removeItem('access_token');
    checkAuthentication();
}

// Enhanced getData function for modern UI
async function getData() {
    const idToken = localStorage.getItem('id_token');
    const fileContainer = document.getElementById('file-container');
    
    if (!idToken) {
        fileContainer.innerHTML = '<div class="empty-state"><p>You must be logged in to access the API.</p></div>';
        return;
    }
    
    try {
        fileContainer.innerHTML = `
            <div class="empty-state">
                <div class="loading-spinner"></div>
                <h3>Testing API connection...</h3>
            </div>
        `;
        
        const response = await fetch(config.apiUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${idToken}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`API request failed: ${response.status}`);
        }
        
        const data = await response.json();
        
        fileContainer.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-check-circle" style="color: #28a745;"></i>
                <h3>API Test Successful!</h3>
                <div class="upload-instructions">
                    <pre>${JSON.stringify(data, null, 2)}</pre>
                </div>
                <button class="btn btn-primary" onclick="listS3Files()">
                    <i class="fas fa-arrow-left"></i>
                    Back to Files
                </button>
            </div>
        `;
        
    } catch (error) {
        fileContainer.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-exclamation-triangle" style="color: #dc3545;"></i>
                <h3>API Test Failed</h3>
                <p>${error.message}</p>
                <button class="btn btn-primary" onclick="listS3Files()">
                    <i class="fas fa-arrow-left"></i>
                    Back to Files
                </button>
            </div>
        `;
    }
}


// Enhanced listS3Files function for modern UI
async function listS3Files() {
    const idToken = localStorage.getItem('id_token');
    const fileContainer = document.getElementById('file-container');
    
    if (!idToken) {
        fileContainer.innerHTML = '<div class="empty-state"><p>You must be logged in to access files.</p></div>';
        return;
    }
    
    try {
        console.log('Making S3 list API call...');
        
        // Show loading state
        fileContainer.innerHTML = `
            <div class="empty-state">
                <div class="loading-spinner"></div>
                <h3>Loading your files...</h3>
            </div>
        `;
        
        const response = await fetch('/api/s3/list?prefix=', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${idToken}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });
        
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`API request failed: ${response.status} - ${errorText}`);
        }
        
        const data = await response.json();
        console.log('S3 API response data:', data);
        
        // Clear container
        fileContainer.innerHTML = '';
        
        if (data.files && data.files.length > 0) {
            // Create file grid
            const fileGrid = document.createElement('div');
            fileGrid.className = 'file-grid';
            
            data.files.forEach((file, index) => {
                const displayName = file.displayKey || file.key || file;
                const fullKey = file.key || file;
                const fileSize = formatFileSize(file.size);
                const fileDate = new Date(file.lastModified).toLocaleDateString();
                const fileIcon = getFileIcon(displayName);
                
                const fileCard = document.createElement('div');
                fileCard.className = 'file-card';
                fileCard.innerHTML = `
                    <div class="file-icon">
                        <i class="${fileIcon}"></i>
                    </div>
                    <div class="file-name">${displayName}</div>
                    <div class="file-meta">
                        <span>${fileSize}</span>
                        <span>${fileDate}</span>
                    </div>
                    <div class="file-actions-card">
                        <button class="btn btn-primary btn-sm download-btn" data-key="${fullKey}" data-name="${displayName}">
                            <i class="fas fa-download"></i>
                            Download
                        </button>
                    </div>
                    <div class="status-indicator" id="status-${index}"></div>
                `;
                
                // Add download event listener
                const downloadBtn = fileCard.querySelector('.download-btn');
                downloadBtn.addEventListener('click', () => downloadFile(fullKey, displayName, index));
                
                fileGrid.appendChild(fileCard);
            });
            
            fileContainer.appendChild(fileGrid);
            
        } else {
            // Show empty state
            fileContainer.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-folder-open"></i>
                    <h3>No files found</h3>
                    <p>Your file storage is empty. Upload some files to get started!</p>
                    <div class="upload-instructions">
                        <strong>Upload files using AWS CLI:</strong><br>
                        <code>aws s3 cp &lt;local-file&gt; s3://${data.bucket}/users/${data.userId}/&lt;filename&gt;</code>
                    </div>
                </div>
            `;
        }
        
    } catch (error) {
        console.error('Error calling S3 API:', error);
        fileContainer.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-exclamation-triangle" style="color: #dc3545;"></i>
                <h3>Error loading files</h3>
                <p>${error.message}</p>
                <button class="btn btn-primary" onclick="listS3Files()">
                    <i class="fas fa-retry"></i>
                    Try Again
                </button>
            </div>
        `;
    }
}

// Enhanced downloadFile function for modern UI
async function downloadFile(fullKey, displayName, index) {
    const idToken = localStorage.getItem('id_token');
    const statusDiv = document.getElementById(`status-${index}`);
    
    if (!idToken) {
        showStatus(statusDiv, 'You must be logged in to download files.', 'error');
        return;
    }
    
    try {
        console.log(`Requesting download URL for: ${fullKey}`);
        
        showStatus(statusDiv, 'Generating secure download link...', 'loading');
        
        const encodedKey = encodeURIComponent(fullKey);
        const response = await fetch(`/api/s3/download/${encodedKey}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${idToken}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });
        
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Download request failed: ${response.status}`);
        }
        
        const downloadData = await response.json();
        
        showStatus(statusDiv, 'Starting download...', 'loading');
        
        // Create and trigger download
        const downloadLink = document.createElement('a');
        downloadLink.href = downloadData.downloadUrl;
        downloadLink.download = displayName;
        downloadLink.style.display = 'none';
        
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
        
        showStatus(statusDiv, `Downloaded successfully! ✓`, 'success');
        
        // Clear status after 3 seconds
        setTimeout(() => {
            statusDiv.classList.remove('show');
        }, 3000);
        
    } catch (error) {
        console.error('Error downloading file:', error);
        showStatus(statusDiv, `Download failed: ${error.message}`, 'error');
    }
}

// Helper functions
function showStatus(statusDiv, message, type) {
    statusDiv.textContent = message;
    statusDiv.className = `status-indicator status-${type} show`;
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function getFileIcon(filename) {
    const ext = filename.split('.').pop().toLowerCase();
    const iconMap = {
        'pdf': 'fas fa-file-pdf',
        'doc': 'fas fa-file-word',
        'docx': 'fas fa-file-word',
        'xls': 'fas fa-file-excel',
        'xlsx': 'fas fa-file-excel',
        'ppt': 'fas fa-file-powerpoint',
        'pptx': 'fas fa-file-powerpoint',
        'jpg': 'fas fa-file-image',
        'jpeg': 'fas fa-file-image',
        'png': 'fas fa-file-image',
        'gif': 'fas fa-file-image',
        'mp4': 'fas fa-file-video',
        'avi': 'fas fa-file-video',
        'mp3': 'fas fa-file-audio',
        'wav': 'fas fa-file-audio',
        'zip': 'fas fa-file-archive',
        'rar': 'fas fa-file-archive',
        'txt': 'fas fa-file-alt',
        'js': 'fas fa-file-code',
        'html': 'fas fa-file-code',
        'css': 'fas fa-file-code',
        'json': 'fas fa-file-code'
    };
    
    return iconMap[ext] || 'fas fa-file';
}


// Memory browsing functions - Add these to your app.js.template

function showMemorySection() {
    const authenticatedSection = document.getElementById('authenticated-section');
    const memorySection = document.getElementById('memory-section');
    
    // Hide file section
    authenticatedSection.style.display = 'none';
    
    // Show memory section and ensure it's visible
    memorySection.style.display = 'block';
    memorySection.style.position = 'relative';
    memorySection.style.zIndex = '1';
    
    // Load public memory by default
    loadMemoryFiles('public');
}


// Show file section and hide memory section
function showFileSection() {
    const authenticatedSection = document.getElementById('authenticated-section');
    const memorySection = document.getElementById('memory-section');
    
    authenticatedSection.style.display = 'block';
    memorySection.style.display = 'none';
    
    // Refresh file list
    if (typeof listS3Files === 'function') {
        listS3Files();
    }
}

// Load memory files based on scope (public or user)
async function loadMemoryFiles(scope = 'public') {
    const idToken = localStorage.getItem('id_token');
    const memoryContainer = document.getElementById('memory-container');
    
    if (!idToken) {
        memoryContainer.innerHTML = '<div class="empty-state"><p>You must be logged in to view memory files.</p></div>';
        return;
    }
    
    try {
        console.log(`Loading ${scope} memory files...`);
        
        // Show loading state
        memoryContainer.innerHTML = `
            <div class="empty-state">
                <div class="loading-spinner"></div>
                <h3>Loading memory files...</h3>
            </div>
        `;
        
        // Get user ID for user-scoped memory
        let userId = 'unknown';
        try {
            const payload = JSON.parse(atob(idToken.split('.')[1]));
            userId = payload.sub || 'unknown';
        } catch (e) {
            console.error('Error parsing token for user ID:', e);
        }
        
        // Determine the prefix based on scope
        let prefix;
        if (scope === 'public') {
            prefix = 'claude-memory/public/';
        } else {
            prefix = `claude-memory/${userId}/`;
        }
        
        // Use the S3 list API with custom prefix and no user scoping
        const response = await fetch(`/api/s3/list?prefix=${encodeURIComponent(prefix)}&userScope=false`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${idToken}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`API request failed: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Memory files response:', data);
        
        // Clear container
        memoryContainer.innerHTML = '';
        
        if (data.files && data.files.length > 0) {
            // Sort files by date (newest first)
            const sortedFiles = data.files.sort((a, b) => 
                new Date(b.lastModified) - new Date(a.lastModified)
            );
            
            // Display memory files
            for (const file of sortedFiles) {
                if (file.key.endsWith('.json')) {
                    await displayMemoryFile(file);
                }
            }
        } else {
            // Show empty state
            memoryContainer.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-brain"></i>
                    <h3>No ${scope} memory files found</h3>
                    <p>Memory files will appear here when Claude stores memories using the Chrome extension.</p>
                    ${scope === 'public' ? `
                        <div class="upload-instructions">
                            <strong>Test the memory system:</strong><br>
                            Use the Chrome extension to capture Claude's memory outputs, or test with:<br>
                            <code>curl -X POST ${config.appUrl}/api/memory/public -H "Content-Type: application/json" -d '{"test": "memory"}'</code>
                        </div>
                    ` : ''}
                </div>
            `;
        }
        
    } catch (error) {
        console.error('Error loading memory files:', error);
        memoryContainer.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-exclamation-triangle" style="color: #dc3545;"></i>
                <h3>Error loading memory files</h3>
                <p>${error.message}</p>
                <button class="btn btn-primary" onclick="loadMemoryFiles('${scope}')">
                    <i class="fas fa-retry"></i>
                    Try Again
                </button>
            </div>
        `;
    }
}

// Display a single memory file with content preview
async function displayMemoryFile(file) {
    const memoryContainer = document.getElementById('memory-container');
    const idToken = localStorage.getItem('id_token');
    
    // Create memory card
    const memoryCard = document.createElement('div');
    memoryCard.className = 'memory-card';
    
    // Extract date from file path for grouping
    const dateParts = file.key.match(/(\d{4}-\d{2}-\d{2})/);
    const fileDate = dateParts ? dateParts[1] : 'Unknown';
    const fileSize = formatFileSize(file.size);
    
    memoryCard.innerHTML = `
        <div class="memory-header">
            <div class="conversation-id">Memory File</div>
            <div class="memory-meta">
                <span class="memory-timestamp">
                    <i class="fas fa-calendar"></i>
                    ${fileDate}
                </span>
                <span>
                    <i class="fas fa-hdd"></i>
                    ${fileSize}
                </span>
            </div>
        </div>
        <div class="memory-content" id="content-${file.key.replace(/[^a-zA-Z0-9]/g, '_')}">
            <div class="loading-spinner"></div>
            Loading memory content...
        </div>
        <div class="memory-actions">
            <button class="btn btn-primary btn-sm" onclick="downloadMemoryFile('${file.key}')">
                <i class="fas fa-download"></i>
                Download
            </button>
            <button class="btn btn-secondary btn-sm" onclick="toggleMemoryContent('${file.key.replace(/[^a-zA-Z0-9]/g, '_')}')">
                <i class="fas fa-eye"></i>
                Toggle View
            </button>
        </div>
    `;
    
    memoryContainer.appendChild(memoryCard);
    
    // Load and display memory content
    try {
        const encodedKey = encodeURIComponent(file.key);
        const response = await fetch(`/api/s3/download/${encodedKey}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${idToken}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            const downloadData = await response.json();
            
            // Fetch the actual memory content
            const memoryResponse = await fetch(downloadData.downloadUrl);
            const memoryData = await memoryResponse.json();
            
            // Update memory card with actual content
            const contentDiv = document.getElementById(`content-${file.key.replace(/[^a-zA-Z0-9]/g, '_')}`);
            const conversationId = memoryData.conversationId || 'Unknown';
            const source = memoryData.source || 'Unknown';
            
            // Update header with conversation info
            const headerDiv = memoryCard.querySelector('.conversation-id');
            headerDiv.textContent = `Conversation: ${conversationId}`;
            
            // Add source badge
            const metaDiv = memoryCard.querySelector('.memory-meta');
            metaDiv.innerHTML += `<span class="memory-source">${source}</span>`;
            
            // Display formatted content
            contentDiv.innerHTML = `<pre>${JSON.stringify(memoryData, null, 2)}</pre>`;
            
        } else {
            throw new Error('Failed to load memory content');
        }
        
    } catch (error) {
        console.error('Error loading memory content:', error);
        const contentDiv = document.getElementById(`content-${file.key.replace(/[^a-zA-Z0-9]/g, '_')}`);
        contentDiv.innerHTML = `<span style="color: #dc3545;">Error loading content: ${error.message}</span>`;
    }
}

// Download memory file
async function downloadMemoryFile(fileKey) {
    const idToken = localStorage.getItem('id_token');
    
    if (!idToken) {
        alert('You must be logged in to download files.');
        return;
    }
    
    try {
        const encodedKey = encodeURIComponent(fileKey);
        const response = await fetch(`/api/s3/download/${encodedKey}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${idToken}`,
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) {
            throw new Error(`Download request failed: ${response.status}`);
        }
        
        const downloadData = await response.json();
        
        // Create and trigger download
        const downloadLink = document.createElement('a');
        downloadLink.href = downloadData.downloadUrl;
        downloadLink.download = fileKey.split('/').pop();
        downloadLink.style.display = 'none';
        
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
        
    } catch (error) {
        console.error('Error downloading memory file:', error);
        alert(`Download failed: ${error.message}`);
    }
}

// Toggle memory content visibility
function toggleMemoryContent(contentId) {
    const contentDiv = document.getElementById(`content-${contentId}`);
    if (contentDiv.style.display === 'none') {
        contentDiv.style.display = 'block';
    } else {
        contentDiv.style.display = 'none';
    }
}

// File Upload Functionality
let uploadQueue = [];

// Initialize upload functionality
function initializeUpload() {
    const uploadButton = document.getElementById('upload-button');
    const uploadModal = document.getElementById('upload-modal');
    const closeUpload = document.getElementById('close-upload');
    const fileInput = document.getElementById('file-input');
    const browseFiles = document.getElementById('browse-files');
    const uploadZone = document.getElementById('upload-zone');
    const startUpload = document.getElementById('start-upload');
    const clearQueue = document.getElementById('clear-queue');
    
    // Open upload modal
    uploadButton?.addEventListener('click', () => {
        uploadModal.style.display = 'flex';
    });
    
    // Close upload modal
    closeUpload?.addEventListener('click', () => {
        uploadModal.style.display = 'none';
    });
    
    // Close modal when clicking outside
    uploadModal?.addEventListener('click', (e) => {
        if (e.target === uploadModal) {
            uploadModal.style.display = 'none';
        }
    });
    
    // Browse files button
    browseFiles?.addEventListener('click', () => {
        fileInput.click();
    });
    
    // File input change
    fileInput?.addEventListener('change', (e) => {
        handleFileSelect(e.target.files);
    });
    
    // Drag and drop
    uploadZone?.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadZone.classList.add('drag-over');
    });
    
    uploadZone?.addEventListener('dragleave', () => {
        uploadZone.classList.remove('drag-over');
    });
    
    uploadZone?.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadZone.classList.remove('drag-over');
        handleFileSelect(e.dataTransfer.files);
    });
    
    // Start upload button
    startUpload?.addEventListener('click', startUploadProcess);
    
    // Clear queue button
    clearQueue?.addEventListener('click', () => {
        uploadQueue = [];
        updateUploadQueue();
    });
}

// Handle file selection
function handleFileSelect(files) {
    const maxSize = 100 * 1024 * 1024; // 100MB
    
    for (let file of files) {
        if (file.size > maxSize) {
            alert(`File "${file.name}" exceeds maximum size of 100MB`);
            continue;
        }
        
        // Check if file already in queue
        if (!uploadQueue.find(f => f.name === file.name)) {
            uploadQueue.push({
                file: file,
                name: file.name,
                size: file.size,
                type: file.type || 'application/octet-stream',
                status: 'pending',
                progress: 0
            });
        }
    }
    
    updateUploadQueue();
}

// Update upload queue display
function updateUploadQueue() {
    const uploadQueueDiv = document.getElementById('upload-queue');
    const uploadItems = document.getElementById('upload-items');
    
    if (uploadQueue.length === 0) {
        uploadQueueDiv.style.display = 'none';
        return;
    }
    
    uploadQueueDiv.style.display = 'block';
    uploadItems.innerHTML = uploadQueue.map((item, index) => `
        <div class="upload-item" id="upload-item-${index}">
            <i class="upload-item-icon fas fa-file"></i>
            <div class="upload-item-info">
                <div class="upload-item-name">${item.name}</div>
                <div class="upload-item-size">${formatFileSize(item.size)}</div>
            </div>
            <div class="upload-item-status upload-status-${item.status}">
                ${getStatusText(item.status)}
            </div>
            <div class="upload-progress">
                <div class="upload-progress-bar" style="width: ${item.progress}%"></div>
            </div>
        </div>
    `).join('');
}

// Format file size
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// Get status text
function getStatusText(status) {
    const statusMap = {
        'pending': 'Pending',
        'uploading': 'Uploading...',
        'success': 'Uploaded',
        'error': 'Failed'
    };
    return statusMap[status] || status;
}

// Start upload process
async function startUploadProcess() {
    const idToken = localStorage.getItem('id_token');
    
    if (!idToken) {
        alert('You must be logged in to upload files.');
        return;
    }
    
    const pendingFiles = uploadQueue.filter(f => f.status === 'pending' || f.status === 'error');
    
    for (let i = 0; i < pendingFiles.length; i++) {
        await uploadFile(pendingFiles[i], uploadQueue.indexOf(pendingFiles[i]));
    }
    
    // Refresh file list after all uploads
    setTimeout(() => {
        listS3Files();
    }, 1000);
}

// Upload individual file
async function uploadFile(item, index) {
    const idToken = localStorage.getItem('id_token');
    
    try {
        // Update status
        item.status = 'uploading';
        updateUploadQueue();
        
        // Get presigned URL
        const response = await fetch(`/api/s3/upload`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${idToken}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                fileName: item.name,
                contentType: item.type,
                fileSize: item.size
            })
        });
        
        if (!response.ok) {
            throw new Error(`Failed to get upload URL: ${response.status}`);
        }
        
        const uploadData = await response.json();
        
        // Upload file to S3
        const uploadResponse = await fetch(uploadData.uploadUrl, {
            method: 'PUT',
            headers: {
                'Content-Type': item.type
            },
            body: item.file,
            onUploadProgress: (e) => {
                if (e.lengthComputable) {
                    item.progress = Math.round((e.loaded / e.total) * 100);
                    updateUploadQueue();
                }
            }
        });
        
        if (!uploadResponse.ok) {
            throw new Error(`Upload failed: ${uploadResponse.status}`);
        }
        
        // Update status
        item.status = 'success';
        item.progress = 100;
        updateUploadQueue();
        
    } catch (error) {
        console.error('Error uploading file:', error);
        item.status = 'error';
        updateUploadQueue();
        alert(`Failed to upload ${item.name}: ${error.message}`);
    }
}

// Initialize upload when document is ready
document.addEventListener('DOMContentLoaded', () => {
    initializeUpload();
});


