service: cloudfront-cognito-app

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-2
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource: "arn:aws:s3:::#{WebsiteBucket}/*"

custom:
  s3Bucket: ${self:service}-dbm-website-${sls:stage}-${aws:accountId}
  
functions:
  api:
    handler: api/handler.getData
    events:
      - http:
          path: data
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Custom resource function to set identity pool roles
  setIdentityPoolRoles:
    handler: functions/setIdentityPoolRoles.handler
    environment:
      IDENTITY_POOL_ID: !Ref IdentityPool
      AUTHENTICATED_ROLE_ARN: !GetAtt AuthenticatedRole.Arn

resources:
  Resources:
    # API Gateway Authorizer
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !GetAtt UserPool.Arn

    # S3 bucket for website hosting
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, HEAD]
              AllowedOrigins: ['*']
              MaxAge: 3000

    # CloudFront Origin Access Identity
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Sub "OAI for ${self:service}-${sls:stage}"

    # S3 bucket policy for CloudFront access
    WebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebsiteBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: cloudfront.amazonaws.com
              Action: 's3:GetObject'
              Resource: !Join ['', ['arn:aws:s3:::', !Ref WebsiteBucket, '/*']]
              Condition:
                StringEquals:
                  AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

    # CloudFront Distribution
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          DefaultRootObject: index.html
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          Origins:
            - Id: S3Origin
              DomainName: !GetAtt WebsiteBucket.RegionalDomainName
              S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
          DefaultCacheBehavior:
            AllowedMethods: [GET, HEAD, OPTIONS]
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html

    # Cognito user pool
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${sls:stage}
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true

    # Cognito user pool client
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-app-client-${sls:stage}
        UserPoolId: !Ref UserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - implicit
          - code
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        CallbackURLs:
          - !Sub "https://${CloudFrontDistribution.DomainName}/callback.html"
          - 'http://localhost:8080/callback.html'
        LogoutURLs:
          - !Sub "https://${CloudFrontDistribution.DomainName}/index.html"
          - 'http://localhost:8080/index.html'
        SupportedIdentityProviders:
          - COGNITO

    # Cognito identity pool
    IdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:service}-identity-pool-${sls:stage}
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId: !Ref UserPoolClient
            ProviderName: !GetAtt UserPool.ProviderName

    # IAM roles for authenticated users
    AuthenticatedRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud: !Ref IdentityPool
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: authenticated
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

    # In the resources section, update the custom resource:
    SetRolesCustomResource:
      Type: Custom::SetIdentityPoolRoles
      DependsOn: 
        - IdentityPool
        - AuthenticatedRole
      Properties:
        ServiceToken: !GetAtt SetIdentityPoolRolesLambdaFunction.Arn  # This is the Serverless naming convention
        IdentityPoolId: !Ref IdentityPool
        Roles:
          authenticated: !GetAtt AuthenticatedRole.Arn

    # Lambda function to set identity pool roles
    SetIdentityPoolRolesFunction:
      Type: AWS::Lambda::Function
      Properties:
        Handler: index.handler
        Runtime: nodejs18.x
        Role: !GetAtt SetIdentityPoolRolesFunctionRole.Arn
        Code:
          ZipFile: |
            const AWS = require('aws-sdk');
            const response = require('cfn-response');
            
            exports.handler = async (event, context) => {
              console.log("REQUEST RECEIVED:", JSON.stringify(event));
              
              // For Delete operations, just succeed
              if (event.RequestType === 'Delete') {
                await response.send(event, context, response.SUCCESS);
                return;
              }
              
              const cognitoidentity = new AWS.CognitoIdentity();
              const params = {
                IdentityPoolId: event.ResourceProperties.IdentityPoolId,
                Roles: {
                  authenticated: event.ResourceProperties.Roles.authenticated
                }
              };
              
              try {
                await cognitoidentity.setIdentityPoolRoles(params).promise();
                await response.send(event, context, response.SUCCESS);
              } catch (error) {
                console.error("Error setting identity pool roles:", error);
                await response.send(event, context, response.FAILED);
              }
            };

    # IAM role for the Lambda function with fixed policy
    SetIdentityPoolRolesFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: CognitoAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: cognito-identity:SetIdentityPoolRoles
                  Resource: !Sub "arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/${IdentityPool}"

  Outputs:
    WebsiteURL:
      Description: CloudFront URL for the website
      Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    ApiEndpoint:
      Description: URL of the API Gateway endpoint
      Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}/data"
    UserPoolId:
      Description: ID of the Cognito User Pool
      Value: !Ref UserPool
    UserPoolClientId:
      Description: ID of the Cognito User Pool Client
      Value: !Ref UserPoolClient
    IdentityPoolId:
      Description: ID of the Cognito Identity Pool
      Value: !Ref IdentityPool
